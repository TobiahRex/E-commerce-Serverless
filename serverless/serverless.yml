service: nj2jp

package:
  exclude:

provider:
  name: aws
  runtime: nodejs6.10
  cfLogs: true
  timeout: 20
  stage: development
  region: ap-northeast-1
  iamRoleStatements:
    - Effect: Allow
      Resource: "*"
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DetachNetworkInterface
        - ec2:DeleteNetworkInterface
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        - ses:SendEmail
        - ses:SendRawEmail
        - lambda:InvokeFunction
  environment:
    MONGO_URI: ${file(./config.prod.yml):mongoURI}
    AUTH0_JWT_SECRET: ${file(./config.prod.yml):auth0JwtSecret}
    MARKET_HERO_API_KEY: ${file(./config.prod.yml):marketHeroApiKey}
    SQUARE_ENV: ${file(./config.prod.yml):squareEnv}
    US_SQUARE_LOCATION: ${file(./config.prod.yml):usSquareLocation}
    US_SQUARE_ACCESS_TOKEN: ${file(./config.prod.yml):usSquareAccessToken}
    US_SQUARE_APPLICATION_ID: ${file(./config.prod.yml):usSquareApplicationId}
    JP_SQUARE_LOCATION: ${file(./config.prod.yml):jpSquareLocation}
    JP_SQUARE_ACCESS_TOKEN: ${file(./config.prod.yml):jpSquareAccessToken}
    JP_SQUARE_APPLICATION_ID: ${file(./config.prod.yml):jpSquareApplicationId}
    JWT_SECRET: ${file(./config.prod.yml):jwtSecret}
    SAGAWA_ENV: ${file(./config.prod.yml):sagawaEnv}
    SAGAWA_JAPANESE: ${file(./config.prod.yml):sagawaJapanese}
    SAGAWA_ENGLISH: ${file(./config.prod.yml):sagawaEnglish}
    SLACK_SUPPORT_WEBHOOK: ${file(./config.prod.yml):slackSupportWebhook}
    SLACK_ERROR_NOTIFICATION_WEBHOOK: ${file(./config.prod.yml):slackErrorNotificationWebhook}
    SLACK_GENERAL_NOTIFICATION_WEBHOOK: ${file(./config.prod.yml):slackGeneralNotificationWebhook}
    LAMBDA_ENV: ${file(./config.prod.yml):lambdaEnv}
    LAMBDA_SECRET_ACCESS_KEY: ${file(./config.prod.yml):lambdaSecretAccessKey}
    LAMBDA_ACCESS_KEY_ID: ${file(./config.prod.yml):lambdaAccessKeyId}
    BASE_URL: ${file(./config.prod.yml):baseUrl}
    CEO_EMAIL: ${file(./config.prod.yml):ceoEmail}
    CTO_EMAIL: ${file(./config.prod.yml):ctoEmail}
    CDO_EMAIL: ${file(./config.prod.yml):cdoEmail}
    AWS_SES_REGION: ${file(./config.prod.yml):awsSesRegion}
    RECAPTCHA_SECRET_KEY: ${file(./config.prod.yml):recaptchaSecretKey}

plugins:
  - serverless-webpack

custom:
  webpackIncludeModules: true # enable auto including node_modules
  graphiql:
    babelOptions:
      presets: [es2015, es2016, stage-0]
      plugins: [transform-runtime]

functions:
  graphql:
    handler: handler.graphql
    memorySize: 1024
    timeout: 10
    vpc:
      securityGroupIds:
        - ${file(./config.prod.yml):securityGroupId}
      subnetIds:
        - ${file(./config.prod.yml):subnetId}
    iamRoleStatements:
      - Effect: Allow
        Resource: "*"
        Action:
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DetachNetworkInterface
          - ec2:DeleteNetworkInterface
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - ses:SendEmail
          - ses:SendRawEmail
          - lambda:InvokeFunction
    events:
      - http:
          path: graphql
          method: post
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"

  sagawa:
    handler: handler.sagawa
    memorySize: 1024
    timeout: 10
    vpc:
      securityGroupIds:
        - ${file(./config.prod.yml):securityGroupId}
      subnetIds:
        - ${file(./config.prod.yml):subnetId}
    iamRoleStatements:
      - Effect: Allow
        Resource: "*"
        Action:
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DetachNetworkInterface
          - ec2:DeleteNetworkInterface
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - ses:SendEmail
          - ses:SendRawEmail
          - lambda:InvokeFunction
    events:
      - schedule: cron(0 7 ? * MON *)
